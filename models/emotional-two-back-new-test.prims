

define task emotional-two-back-new-test {

	initial-goals: (update-rehearsal-loop wander)
	goals: (process-stimulus make-response prepare)

	rt: -5 // retrieval threshold (default: -2)
	//retrieval-reinforces: t // default: nil
	ans: 0.02 // less activation noise
	production-prim-latency: 0.05 // default: 0.3
	imaginal-delay: 0.0 // default: 0.2
	//lf: 0.2 // latency factor (default: 0.2)
	le: 0.1 // latency exponent -- taken from ACT-R, but here applies just to retrieval failures (default: 1.0)
	
	default-activation: 2.0 // default: none
	
	default-operator-self-assoc: -3.0 // avoid operators firing repeatedly
	
	
}



define action press-key {
  latency: 0.2 
  noise: 0.1
  distribution: uniform
  output: Pressing
}


define action focus {
  latency: 0.2
  noise: 0.1
  distribution: uniform
  output: Focussing
}


define action linger {
	latency: 0.05
	noise: 0.0
	distribution: uniform
	output: Lingering
}



define script {	
	
	// The 2-back task consists of 6 blocks of 55 trials each (plus 10 practice trials).
	// In each trial a face is shown. The participant has to indicate whether the face's expression matches that of the face two trials ago.
	// Images are presented for 2 seconds. There is an inter-trial interval of 2.5 seconds.
		
	/////////////
	/// SETUP ///
	/////////////

	verbose = 1 // Set to 1 to get more verbose output (required for parsing batch runs)
	
	// Create 46 stimuli of each expression
	happy-faces = []
	neutral-faces = []
	sad-faces = []
	
	for i in 0 to 45 {
		happy-faces[i] = ["happy", "happy" + i]
		neutral-faces[i] = ["neutral", "neutral" + i]
		sad-faces[i] = ["sad", "sad" + i]	
	}
	
	// Combine all stimuli in a single list
	all-faces = []
	for i in 0 to 45 {
		all-faces[i] = happy-faces[i]		
		all-faces[i + 46] = neutral-faces[i]
		all-faces[i + 92] = sad-faces[i]	
	}
	

	all-faces = shuffle(all-faces)
		
	// The experiment has 330 trials, 110 per facial expression.
	// Add 64 items to each expression through duplication
	happy-faces-dupl = []
	neutral-faces-dupl = []
	sad-faces-dupl = []
	
	for i in 0 to 45 {
		happy-faces-dupl[i] = happy-faces[i] // include original 46 faces 
		neutral-faces-dupl[i] = neutral-faces[i]
		sad-faces-dupl[i] = sad-faces[i]
		happy-faces-dupl[i + 46] = happy-faces[i] // include original 46 faces a second time
		neutral-faces-dupl[i + 46] = neutral-faces[i]
		sad-faces-dupl[i + 46] = sad-faces[i]
		if (i < 18) {
			happy-faces-dupl[i + 92] = happy-faces[i] // include 18 faces a third time
			neutral-faces-dupl[i + 92] = neutral-faces[i]
			sad-faces-dupl[i + 92] = sad-faces[i]
		}
	}
	
	task-stimuli = []
	
	for i in 0 to 109 {
		task-stimuli[i] = happy-faces-dupl[i]
		task-stimuli[i + 110] = neutral-faces-dupl[i]
		task-stimuli[i + 220] = sad-faces-dupl[i]
	}
	
	task-stimuli = shuffle(task-stimuli)
	
	
	// There are 6 blocks of 55 trials
	blocks = []
	
	block1 = []
	block2 = []
	block3 = []
	block4 = []
	block5 = []
	block6 = []
	
	// Put 55 trials in each of the six blocks
	// Trials are drawn randomly from the complete list
	for i in 0 to 54 {
		block1[i] = task-stimuli[i]
		block2[i] = task-stimuli[i + 55]
		block3[i] = task-stimuli[i + 110]
		block4[i] = task-stimuli[i + 165]
		block5[i] = task-stimuli[i + 220]
		block6[i] = task-stimuli[i + 275]
	}
	
	blocks[0] = block1
	blocks[1] = block2
	blocks[2] = block3
	blocks[3] = block4
	blocks[4] = block5
	blocks[5] = block6
	
	if (verbose) {
		print("Setting up 2-back task...")
		print("Randomly created 6 blocks of trials:")
		blocknum = 1
		for block in blocks {
			print()
			print("BLOCK ", blocknum)
			blocknum = blocknum + 1
			print("______________________________________")
			print("EXPRESSION        FACE")
			print("______________________________________")
			trialnum = 0
			expressions = [0, 0, 0]
			expr = ""
			for trial in block {
				expression = trial[0]
				face = trial[1]
				if (expression == "happy") {
					expressions[0] = expressions[0] + 1
					expr = "hap"
				}
				if (expression == "neutral") {
					expressions[1] = expressions[1] + 1
					expr = "neu"
				}
				if (expression == "sad") {
					expressions[2] = expressions[2] + 1
					expr = "sad"
				}
				print(expr, "                        ", face)
				
				trialnum = trialnum + 1
			}
			print("______________________________________")
			print("(", trialnum, "trials. Happy:", expressions[0], " Neutral:", expressions[1], " Sad:", expressions[2], ")")
			print("______________________________________")
		}
	}
	
	
	
	
	
	//////////////////////
	/// RUN EXPERIMENT ///
	//////////////////////
	
	if (verbose) {
		print()
		print("Running experiment...")
	}

	// The experiment consists of 3 blocks
	blocknum = 0
	for block in blocks {
		
		blocknum = blocknum + 1
		
		if (verbose) {
			print("______________________________________")
			print("Starting block", blocknum)
			print("______________________________________")
		}
		
		// Each block contains 55 trials
		trialnum = 0
		for trial in block {
			trialnum = trialnum + 1
			expression = trial[0]
			face = trial[1]
			response = "none"
			
			starttime = time()
			
			if (verbose) {
				print("______________________________________")
				print("Trial", trialnum, "expression:", expression, "time:", starttime)
				print("______________________________________")
			}
				
			// show face stimulus					
			screen("face", face)
			
			// The face stimulus is on screen for 2.0 seconds
			run-until-relative-time-or-action(2.0, "press-key")
			rt = time() - starttime
			timeleft = 2.0 - rt
			if (verbose) {
				print("----- TIME LEFT: ", timeleft)
			}
			
			
			// Retrieve the model's latest action (which contains its response or lack thereof)
			action = last-action()
			if (length(action) > 1) {
				response = action[1]				
			}
			if (verbose) {
				print("Action:", response)
			}
			
			// If the model was done running before the 2 seconds were up, it responded on time
			if (timeleft > 0) {
				
				// Show "done" on the screen so that the model does not respond again
				screen("face", face, "done")
				
				// Run the model for the remainder of the two seconds
				run-relative-time(timeleft)
			
			} else {
				// The model did not respond within 2 seconds
				if (verbose) {
					print("No response within 2s time limit.")
				}
			}
			
			// There is a 0.5 second interval between trials, in which the screen is empty (here fixation)
			screen("fixation")

			run-relative-time(0.5)
		}

		remove-chunks-created-by-model()
		trial-end()
	
	}

}
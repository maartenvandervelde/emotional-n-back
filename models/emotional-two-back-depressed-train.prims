

define task emotional-two-back-train {
	
	// Goals
	initial-goals: (update-rehearsal-loop wander)
	goals: (process-stimulus make-response prepare)
	
	task-constants: (update-rehearsal-loop wander face face-observation two-back update-two-back old one-back update-one-back zero-back update-zero-back process-stimulus recognise-stimulus make-response prepare fixation focus face-expression press-key same diff memory self happy neutral sad error done linger)


	// Activation-related settings
	default-activation: 2 // lower bound on baselevel activation (default: none)
	ans: 0 // activation noise (default: 0.2)
	rt: -5 // retrieval threshold (default: -2)
	lf: 0.1 // latency factor (default: 0.2)
	le: 0.1 // latency exponent -- taken from ACT-R, but here it applies just to retrieval failures (default: 1.0)
	default-operator-self-assoc: -3 // spreading activation from an operator to itself (discourage operators firing repeatedly) (default: -1.0)
	
	// Timing-related settings
	production-prim-latency: 0.0 // time to fire subsequent productions of an operator (default: 0.3)
	imaginal-delay: 0.0 // time to create imaginal chunk (default: 0.2)	
}



define goal update-rehearsal-loop {

	//-------------------------------------------------//
	// Stage 1: update the items in the rehearsal loop //
	//-------------------------------------------------//
	
	operator get-old-two-back {
		"Retrieve the old 2-back observation from DM"
		G1 = update-rehearsal-loop
		G3 = nil
		V1 = face
		V3 = nil
		==>
		face-observation -> RT1
		two-back -> RT2
		
		update-two-back -> G3
	}

	operator modify-old-two-back {
		"Create a modified version of the old 2-back observation"
		RT1 = face-observation
		RT2 = two-back
		==>
		face-observation -> WM1
		old -> WM2
		RT3 -> WM3
		RT4 -> WM4
				
		face-observation -> RT1
		one-back -> RT2
		
		update-one-back -> G3
	}
	
	operator cannot-retrieve-old-two-back {
		"Retrieving the old 2-back failed, so move on to the old 1-back"
		G3 = update-two-back
		RT1 = error
		==>
		face-observation -> RT1
		one-back -> RT2
		
		update-one-back -> G3
	}
	
	
	operator get-old-one-back {
		"Retrieve the old 1-back observation from DM"
		G3 = update-one-back
		RT1 = nil
		==>
		face-observation -> RT1
		one-back -> RT2
		
		nil -> WM1
	}
	
	operator modify-old-one-back {
		"Create a modified version of the old 1-back observation"
		G3 = update-one-back
		RT1 = face-observation
		RT2 = one-back
		==>
		face-observation -> WM1
		two-back -> WM2
		RT3 -> WM3
		RT4 -> WM4
		
		face-observation -> RT1
		zero-back -> RT2
				
		update-zero-back -> G3
	}
	
	operator cannot-retrieve-old-one-back {
		"Retrieving the old 1-back failed, so move on to the old 0-back"
		G3 = update-one-back
		RT1 = error
		==>
		face-observation -> RT1
		zero-back -> RT2
		
		update-zero-back -> G3
	}
	
	operator modify-old-zero-back {
		"Create a modified version of the old 0-back observation"
		G3 = update-zero-back
		RT1 = face-observation
		RT2 = zero-back
		==>
		face-observation -> WM1
		one-back -> WM2
		RT3 -> WM3
		RT4 -> WM4
		
		process-stimulus -> G1
		nil -> G3
	}
	
	operator cannot-retrieve-old-zero-back {
		"Retrieving the old 0-back failed, so move on to next stage"
		G3 = update-zero-back
		RT1 = error
		==>
		process-stimulus -> G1
		nil -> G3
	}
	
}

define goal process-stimulus {
	
	//---------------------------------------//
	// Stage 2: process the current stimulus //
	//---------------------------------------//
	
	operator process-face {
		"Begin a retrieval to identify the facial expression of the current stimulus"
		G1 = process-stimulus
		V1 = face
		V3 = nil
		RT1 = nil
		==>
		face-expression -> RT1
		V2 -> RT3
		
		recognise-stimulus -> G3
	}
	
	operator recognise-face {
		"Create a WM chunk for the recognised face"
		G3 = recognise-stimulus
		RT1 = face-expression
		==>
		face-observation -> WM1
		zero-back -> WM2
		RT2 -> WM3
		ASSIGN_NEW_CONTEXT_LABEL -> WM4
		
		make-response -> G1
		nil -> G3
	}
		
}

define goal make-response {
	
	//----------------------------------------//
	// Stage 3: work out the correct response //
	//----------------------------------------//
	
	operator get-two-back {
		"Retrieve the 2-back observation"
		G1 = make-response
		RT1 = nil
		==>
		face-observation -> RT1
		two-back -> RT2
	}
	
	operator two-back-matches {
		"The current observation (in WM) matches the mood of the 2-back observation (in RT), so respond SAME. Also push the current observation from WM to DM."
		G1 = make-response
		RT1 = face-observation
		RT2 = two-back
		RT3 = WM3
		==>
		nil -> WM1
		
 		press-key -> AC1
 		same -> AC2
		
		prepare -> G1
		nil -> G3
		
		
	}
	
	operator two-back-does-not-match {
		"The current observation (in WM) does not match the mood of the 2-back observation (in RT), so respond DIFF. Also push the current observation from WM to DM."
		G1 = make-response
		RT1 = face-observation
		RT2 = two-back
		RT3 <> WM3
		==>
		nil -> WM1
		
 		press-key -> AC1
 		diff -> AC2
		
		prepare -> G1
		nil -> G3
		
	}
	
	operator cannot-retrieve-two-back {
		"The 2-back observation cannot be retrieved, so don't respond"
		G1 = make-response
		RT1 = error
		==>
		nil -> WM1
		
		prepare -> G1
	}
	
}


	
	

define goal prepare {
		
	//----------------------------//
	// Stage 0: focus on fixation //
	//----------------------------//
	
	operator focus-on-fixation {
		"Focus on the fixation cross in preparation for the next stimulus"
		V1 = fixation
		==>
		focus -> AC1
		
		nil -> WM1
		
		update-rehearsal-loop -> G1
		nil -> G3
	}
	
}



define goal wander {
	
	//-------------------------------//
	// Lingering on items leaving WM //
	//-------------------------------//
	
	operator linger-on-sad-old-two-back(activation=2.5) {
		WM1 = face-observation
		WM2 = old
		WM3 = sad
		==>
		linger -> AC1
		WM3 -> AC2
	}
	
	
//	operator linger-on-happy-old-two-back(activation=2.5) {
//		WM1 = face-observation
//		WM2 = old
//		WM3 = happy
//		==>
//		linger -> AC1
//		WM3 -> AC2
//	}


	//----------------//
	// Mind-wandering //
	//----------------//

	operator ignore-face-wander-instead(activation=1.65) {
		"Start mind-wandering when a face stimulus appears"
		V1 = face
		V3 = nil
		==>
		memory -> RT1
		self -> RT2
		
		nil -> G3
	}
	
	operator ignore-expression-wander-instead(activation=1.65) {
		"Start mind-wandering when a facial expression has been retrieved"
		RT1 = face-expression
		==>
		memory -> RT1
		self -> RT2
		
		nil -> G3
	}
	
	operator ignore-observation-wander-instead(activation=1.65) {
		"Start mind-wandering when an n-back item has been retrieved"
		RT1 = face-observation
		==>
		memory -> RT1
		self -> RT2
		
		nil -> G3
	}
	
	
	operator done-retrieve-random-memory(activation=1.65) {
		"When a response has already been made, retrieve a random memory"
		V3 = done
		==>
		memory -> RT1
		self -> RT2
	}
	

	operator process-memory-retrieve-next(activation=1.65) {
		"When a random memory has been retrieved, place it in WM and make a new retrieval request"
		RT1 = memory
		==>
		RT3 -> WM1
		
		memory -> RT1
		self -> RT2
	}
	
//	operator process-memory-auto-respond-same(activation=1.5) {
//		"When a random memory has been retrieved, place it in WM and make an automatic 'same' response"
//		RT1 = memory
//		V1 = face
//		V3 = nil // Ensure that no response has been made yet
//		==>
//		RT3 -> WM1
//		
// 		press-key -> AC1
// 		same -> AC2
//	}
//	
//	operator process-memory-auto-respond-diff(activation=1.5) {
//		"When a random memory has been retrieved, place it in WM and make an automatic 'diff' response"
//		RT1 = memory
//		V1 = face
//		V3 = nil // Ensure that no response has been made yet
//		==>
//		RT3 -> WM1
//		
// 		press-key -> AC1
// 		diff -> AC2
//	}

	
}



define facts {		
	(memory x y) // Explicit definition prevents unwanted retrievals of "memory" chunk during mind-wandering
}



define action press-key {
  latency: 0.5
  noise: 0.1
  distribution: uniform
  output: Pressing
}


define action focus {
  latency: 0.15
  noise: 0.05
  distribution: uniform
  output: Focussing
}


define action linger {
	latency: 0.0
	noise: 0.0
	distribution: uniform
	output: Lingering
}


define script {	
	
	// The 2-back task consists of 6 blocks of 55 trials each (plus 10 practice trials).
	// In each trial a face is shown. The participant has to indicate whether the face's expression matches that of the face two trials ago.
	// Images are presented for 2 seconds. There is an inter-trial interval of 2.5 seconds.
		
	/////////////
	/// SETUP ///
	/////////////

	verbose = 1 // Set to 1 to get more verbose output (required for parsing batch runs)
	
	// Create 46 stimuli of each expression
	happy-faces = []
	neutral-faces = []
	sad-faces = []
	
	for i in 0 to 45 {
		happy-faces[i] = ["happy", "happy" + i]
		neutral-faces[i] = ["neutral", "neutral" + i]
		sad-faces[i] = ["sad", "sad" + i]	
	}
	
	// Combine all stimuli in a single list
	all-faces = []
	for i in 0 to 45 {
		all-faces[i] = happy-faces[i]		
		all-faces[i + 46] = neutral-faces[i]
		all-faces[i + 92] = sad-faces[i]	
	}
	
	// Add all faces to the model's DM (this allows it to recognise facial expressions)
	for i in 0 to 137 {
		face = all-faces[i]
		chunk-name = "face" + i
		expression = face[0]
		image = face[1]
		add-dm(chunk-name, "face-expression", expression, image)
		
		// 3/10/2017: set strength of association between mood chunks and face chunks to a positive value rather than 0
		// to allow spreading activation from the target (goal buffer) to similar chunks in memory
		sji_mood_to_face = 1 // in practice the actual SA is 1/4 of this value (since there are 4 slots in the goal buffer)
	
	
		// Set activation of face chunks depending on their expression (so some faces are recognised faster than others)
//		face_activation_happy = 3.3
//		face_activation_neutral = 0.3
//		face_activation_sad = 1.3
		
//		face_activation_happy = 2.1
//		face_activation_neutral = 2
//		face_activation_sad = 2
		
		face_activation_happy = 1
		face_activation_neutral = 0
		face_activation_sad = 1.5
		
//		face_activation_happy = 1.3
//		face_activation_neutral = 0.3
//		face_activation_sad = 3.3
	    
		if (expression == "happy") {
			set-activation(chunk-name, face_activation_happy)
			set-sji("happy", chunk-name, sji_mood_to_face)
		}
	    
		if (expression == "neutral") {
			set-activation(chunk-name, face_activation_neutral)
			set-sji("neutral", chunk-name, sji_mood_to_face)
		}
	    
		if (expression == "sad") {
			set-activation(chunk-name, face_activation_sad)
			set-sji("sad", chunk-name, sji_mood_to_face)
		}
	}
		
	
	all-faces = shuffle(all-faces)
		
	// The experiment has 330 trials, 110 per facial expression.
	// Add 64 items to each expression through duplication
	happy-faces-dupl = []
	neutral-faces-dupl = []
	sad-faces-dupl = []
	
	for i in 0 to 45 {
		happy-faces-dupl[i] = happy-faces[i] // include original 46 faces 
		neutral-faces-dupl[i] = neutral-faces[i]
		sad-faces-dupl[i] = sad-faces[i]
		happy-faces-dupl[i + 46] = happy-faces[i] // include original 46 faces a second time
		neutral-faces-dupl[i + 46] = neutral-faces[i]
		sad-faces-dupl[i + 46] = sad-faces[i]
		if (i < 18) {
			happy-faces-dupl[i + 92] = happy-faces[i] // include 18 faces a third time
			neutral-faces-dupl[i + 92] = neutral-faces[i]
			sad-faces-dupl[i + 92] = sad-faces[i]
		}
	}
	
	task-stimuli = []
	
	for i in 0 to 109 {
		task-stimuli[i] = happy-faces-dupl[i]
		task-stimuli[i + 110] = neutral-faces-dupl[i]
		task-stimuli[i + 220] = sad-faces-dupl[i]
	}
	
	task-stimuli = shuffle(task-stimuli)
	
	
	// There are 6 blocks of 55 trials
	blocks = []
	
	block1 = []
	block2 = []
	block3 = []
	block4 = []
	block5 = []
	block6 = []
	
	// Put 55 trials in each of the six blocks
	// Trials are drawn from the shuffled complete list
	for i in 0 to 54 {
		block1[i] = task-stimuli[i]
		block2[i] = task-stimuli[i + 55]
		block3[i] = task-stimuli[i + 110]
		block4[i] = task-stimuli[i + 165]
		block5[i] = task-stimuli[i + 220]
		block6[i] = task-stimuli[i + 275]
	}
	
	blocks[0] = block1
	blocks[1] = block2
	blocks[2] = block3
	blocks[3] = block4
	blocks[4] = block5
	blocks[5] = block6
	
	if (verbose) {
		print("Setting up 2-back task...")
		print("Randomly created 6 blocks of trials:")
		blocknum = 1
		for block in blocks {
			print()
			print("BLOCK ", blocknum)
			blocknum = blocknum + 1
			print("______________________________________")
			print("EXPRESSION        FACE")
			print("______________________________________")
			trialnum = 0
			expressions = [0, 0, 0]
			expr = ""
			for trial in block {
				expression = trial[0]
				face = trial[1]
				if (expression == "happy") {
					expressions[0] = expressions[0] + 1
					expr = "hap"
				}
				if (expression == "neutral") {
					expressions[1] = expressions[1] + 1
					expr = "neu"
				}
				if (expression == "sad") {
					expressions[2] = expressions[2] + 1
					expr = "sad"
				}
				print(expr, "                        ", face)
				
				trialnum = trialnum + 1
			}
			print("______________________________________")
			print("(", trialnum, "trials. Happy:", expressions[0], " Neutral:", expressions[1], " Sad:", expressions[2], ")")
			print("______________________________________")
		}
	}
	
	
//	// Create off-task memories
//	// Slots:
//	// title (e.g. memoryhappy1): for convenience.
//	// memory: indicates chunk type; used as first retrieval cue.
//	// self: used as an additional retrieval cue (without it we get weird retrievals of random singletons due to partial matching).
//	// name (e.g. ha1): distinguishes one happy memory from another (i.e. the specific content).
//	// mood (e.g. happy): describes mood of the memory. This part of the memory is placed in WM to spread activation.
//	
//	// Strength of association between mood chunks and corresponding memory chunks
//	sji_mood_to_memory = 1
//	
//	for i in 0 to 10 {
//		memoryhappy = "memoryhappy" + i
//		name = "ha" + i
//		add-dm(memoryhappy, "memory", "self", name, "happy")
//		set-sji("happy", memoryhappy, sji_mood_to_memory)
//		
//		memoryneutral = "memoryneutral" + i
//		name = "ne" + i
//		add-dm(memoryneutral, "memory", "self", name, "neutral")
//		set-sji("neutral", memoryneutral, sji_mood_to_memory)
//		
//		memorysad = "memorysad" + i
//		name = "sa" + i
//		add-dm(memorysad, "memory", "self", name, "sad")
//		set-sji("sad", memorysad, sji_mood_to_memory)
//	}

	// Create neutral off-task memories (Added 10/01/2018)
	// Slots:
	// title (e.g. memory1): for convenience.
	// memory: indicates chunk type; used as first retrieval cue.
	// self: used as an additional retrieval cue (without it we get weird retrievals of random singletons due to partial matching).
	// name (e.g. memory1): distinguishes one memory from another (the chunk title alone is not sufficient).
	
	for i in 0 to 30 {
		title = "memory" + i
		add-dm(title, "memory", "self", title)
	}
	
	task-operator-activation = 2
	
	task-operators = [
		"get-old-two-back",
		"modify-old-two-back",
		"cannot-retrieve-old-two-back",
		"get-old-one-back",
		"modify-old-one-back",
		"cannot-retrieve-old-one-back",
		"modify-old-zero-back",
		"cannot-retrieve-old-zero-back",
		"process-face",
		"recognise-face",
		"get-two-back",
		"two-back-matches",
		"two-back-does-not-match",
		"cannot-retrieve-two-back",
		"focus-on-fixation"
	]
	
	for task-op in task-operators {
		set-activation(task-op, task-operator-activation)
	}
	
	
	
	//////////////////////
	/// RUN EXPERIMENT ///
	//////////////////////
	
	if (verbose) {
		print()
		print("Running experiment...")
	}

	// The experiment consists of 3 blocks
	blocknum = 0
	for block in blocks {
		
		blocknum = blocknum + 1
		
		if (verbose) {
			print("______________________________________")
			print("Starting block", blocknum)
			print("______________________________________")
		}
		
		// Each block contains 55 trials
		trialnum = 0
		for trial in block {
			trialnum = trialnum + 1
			expression = trial[0]
			face = trial[1]
			response = "none"
			
			starttime = time()
			
			if (verbose) {
				print("______________________________________")
				print("Trial", trialnum, "expression:", expression, "time:", starttime)
				print("______________________________________")
			}
				
			// show face stimulus					
			screen("face", face)
			
			// The face stimulus is on screen for 2.0 seconds
			run-until-relative-time-or-action(2.0, "press-key")
			rt = time() - starttime
			timeleft = 2.0 - rt
			if (verbose) {
				print("----- TIME LEFT: ", timeleft)
			}
			
			
			// Retrieve the model's latest action (which contains its response or lack thereof)
			action = last-action()
			if (length(action) > 1) {
				response = action[1]				
			}
			if (verbose) {
				print("Action:", response)
			}
			
			// If the model was done running before the 2 seconds were up, it responded on time
			if (timeleft > 0) {
				
				// Show "done" on the screen so that the model does not respond again
				screen("face", face, "done")
				
				// Run the model for the remainder of the two seconds
				run-relative-time(timeleft)
			
			} else {
				// The model did not respond within 2 seconds
				if (verbose) {
					print("No response within 2s time limit.")
				}
			}
			
			// There is a 0.5 second interval between trials, in which the screen is empty (here fixation)
			screen("fixation")

			run-relative-time(0.5)
		}

		// Finish each block by removing the rehearsal loop chunks from DM
		remove-chunks-created-by-model()
		
		trial-end()
	
	}

}